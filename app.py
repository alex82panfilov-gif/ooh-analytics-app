# app.py (–§–ò–ù–ê–õ–¨–ù–ê–Ø –í–ï–†–°–ò–Ø - –í–æ–∑–≤—Ä–∞—â–µ–Ω–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –∫–∞—Ä—Ç–∞ st.map)

import streamlit as st
import pandas as pd
import os
import io
# import pydeck as pdk <-- –£–ë–†–ê–õ–ò –≠–¢–£ –°–¢–†–û–ö–£

# --- –ù–ê–°–¢–†–û–ô–ö–ò ---
DATA_FILE = "data.parquet" 
ADMIN_PASSWORD = "ooh_dashboard_admin_123" 
USER_PASSWORD = "user_123"

# --- –û–ë–©–ò–ï –ù–ê–°–¢–†–û–ô–ö–ò –°–¢–†–ê–ù–ò–¶–´ ---
st.set_page_config(
    layout="wide",
    page_title="OOH Analytics",
    page_icon="https://emojigraph.org/media/google/chart-increasing_1f4c8.png"
)

# --- CSS –°–¢–ò–õ–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
st.markdown("""
<style>
    .block-container { padding-top: 2rem; padding-bottom: 2rem; padding-left: 5rem; padding-right: 5rem; }
    .card { background-color: #FFFFFF; border-radius: 10px; padding: 20px; box-shadow: 0 4px 8px 0 rgba(0,0,0,0.05); border: 1px solid #E6E6E6; height: 100%; }
    .card h3 { margin-top: 0; }
    .kpi-card { display: flex; align-items: center; }
    .kpi-icon { font-size: 2rem; padding: 20px; border-radius: 50%; color: white; margin-right: 20px; }
    .kpi-text { text-align: left; }
    .kpi-value { font-size: 2.2rem; font-weight: bold; }
    .kpi-title { font-size: 0.9rem; color: grey; }
    div[data-testid="stToolbar"] { display: flex; gap: 1rem; width: 100%; }
    header, #MainMenu, footer { visibility: hidden; }
</style>
""", unsafe_allow_html=True)

# --- –§–£–ù–ö–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
@st.cache_data
def load_data(file_path):
    return pd.read_parquet(file_path)

def process_uploaded_file(uploaded_file):
    try:
        df = pd.read_excel(uploaded_file)
        df.rename(columns={'–ì–æ—Ä–æ–¥': 'city', '–§–æ—Ä–º–∞—Ç –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏2': 'format', '–ü—Ä–æ–¥–∞–≤–µ—Ü': 'seller', 'surface_id': 'surface_id', '–ù–æ–º–µ—Ä –∫—Å': 'surface_id', '–ù–æ–º–µ—Ä –∫–æ–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏': 'surface_id', 'GRP (18+)': 'grp', 'GRP (18+) –≤ —Å—É—Ç–∫–∏': 'grp', 'OTS (18+)': 'ots', 'OTS (18+) —Ç—ã—Å.—á–µ–ª. –≤ —Å—É—Ç–∫–∏': 'ots', '–®–∏—Ä–æ—Ç–∞': 'lat', '–î–æ–ª–≥–æ—Ç–∞': 'lon'}, inplace=True, errors='ignore')
        required_columns = ['surface_id', 'grp', 'ots', 'city', 'format', 'seller', 'lat', 'lon']
        for col in required_columns:
            if col not in df.columns: raise KeyError(f"–í —Ñ–∞–π–ª–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–æ–ª–±–µ—Ü '{col}'.")
        for col in ['city', 'format', 'seller']: df[col] = df[col].astype(str)
        for col in ['lat', 'lon']: df[col] = pd.to_numeric(df[col], errors='coerce')
        df.dropna(subset=['city', 'format', 'lat', 'lon'], inplace=True)
        return df
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"); return None

def to_excel(df):
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, index=False, sheet_name='Report')
    return output.getvalue()

# --- –°–ò–°–¢–ï–ú–ê –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
if 'authenticated' not in st.session_state: st.session_state.authenticated = False
if 'role' not in st.session_state: st.session_state.role = None

def login():
    st.markdown("""<style> div[data-testid="stButton"] > button { background-color: #007bff; color: white; border-radius: 5px; padding: 10px 20px; } </style>""", unsafe_allow_html=True)
    st.header("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É OOH Analytics")
    password = st.text_input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:", type="password", label_visibility="collapsed")
    if st.button("–í–æ–π—Ç–∏"):
        if password == ADMIN_PASSWORD: st.session_state.authenticated = True; st.session_state.role = "admin"; st.rerun()
        elif password == USER_PASSWORD: st.session_state.authenticated = True; st.session_state.role = "user"; st.rerun()
        else: st.error("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å")

# --- –ì–õ–ê–í–ù–´–ô –ë–õ–û–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
if not st.session_state.authenticated:
    login()
else:
    # --- –•–ï–î–ï–† (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    logo_col, title_col, controls_col, user_col = st.columns([1, 4, 3, 1])
    with logo_col: st.image("https://emojigraph.org/media/google/chart-increasing_1f4c8.png", width=60)
    with title_col: st.markdown("### OOH Analytics\n*–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞—Ä—É–∂–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã*")
    with controls_col:
        with st.container():
            st.markdown('<div data-testid="stToolbar">', unsafe_allow_html=True)
            export_button_placeholder = st.empty()
            if st.session_state.role == "admin":
                uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å Excel", type=["xlsx", "xls"], label_visibility="collapsed")
                if uploaded_file:
                    new_df = process_uploaded_file(uploaded_file)
                    if new_df is not None: new_df.to_parquet(DATA_FILE, index=False); st.cache_data.clear(); st.success("–§–∞–π–ª –æ–±–Ω–æ–≤–ª–µ–Ω!"); st.rerun()
            st.markdown('</div>', unsafe_allow_html=True)
    with user_col:
        st.markdown(f"**{st.session_state.role.upper()}**")
        if st.button("–í—ã—Ö–æ–¥"): st.session_state.authenticated = False; st.session_state.role = None; st.rerun()
    st.markdown("---")
    
    # --- –û–°–ù–û–í–ù–û–ô –ò–ù–¢–ï–†–§–ï–ô–° (–∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –≤ –±–ª–æ–∫–µ –∫–∞—Ä—Ç—ã) ---
    if not os.path.exists(DATA_FILE):
        st.info("–î–∞–Ω–Ω—ã–µ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ—Å–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª.")
    else:
        df = load_data(DATA_FILE)
        
        main_cols = st.columns([1, 3])
        with main_cols[0]: # –ö–û–õ–û–ù–ö–ê –° –§–ò–õ–¨–¢–†–ê–ú–ò (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
            with st.container():
                st.markdown("<div class='card'>", unsafe_allow_html=True)
                st.subheader("–§–∏–ª—å—Ç—Ä—ã")
                selected_city = st.selectbox("–ì–æ—Ä–æ–¥", options=["–í—Å–µ –≥–æ—Ä–æ–¥–∞"] + sorted(list(df['city'].unique())), label_visibility="collapsed")
                df_for_filters = df if selected_city == "–í—Å–µ –≥–æ—Ä–æ–¥–∞" else df[df['city'] == selected_city]
                selected_seller = st.selectbox("–ü—Ä–æ–¥–∞–≤–µ—Ü", options=["–í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã"] + sorted(list(df_for_filters['seller'].unique())), label_visibility="collapsed")
                st.markdown("##### –§–æ—Ä–º–∞—Ç—ã –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π")
                format_options = sorted(df_for_filters['format'].unique())
                select_all_formats = st.checkbox("–í—ã–±—Ä–∞—Ç—å –≤—Å–µ —Ñ–æ—Ä–º–∞—Ç—ã", value=True)
                selected_formats = []
                for fmt in format_options:
                    if st.checkbox(fmt, value=select_all_formats, key=f"fmt_{fmt}"):
                        selected_formats.append(fmt)
                if not selected_formats: selected_formats = format_options if select_all_formats else []
                st.markdown("</div>", unsafe_allow_html=True)

        with main_cols[1]: # –ö–û–õ–û–ù–ö–ê –° –ö–û–ù–¢–ï–ù–¢–û–ú
            df_filtered = df.copy()
            if selected_city != "–í—Å–µ –≥–æ—Ä–æ–¥–∞": df_filtered = df_filtered[df_filtered['city'] == selected_city]
            if selected_seller != "–í—Å–µ –ø—Ä–æ–¥–∞–≤—Ü—ã": df_filtered = df_filtered[df_filtered['seller'] == selected_seller]
            if selected_formats: df_filtered = df_filtered[df_filtered['format'].isin(selected_formats)]
            else: df_filtered = pd.DataFrame()
            
            if df_filtered.empty:
                st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
            else:
                kpi_cols = st.columns(3)
                total_surfaces, avg_grp, avg_ots_k = df_filtered['surface_id'].nunique(), df_filtered['grp'].mean(), df_filtered['ots'].mean()
                with kpi_cols[0]: st.markdown(f"""<div class='card kpi-card'><div class='kpi-icon' style='background-color: #4A90E2;'>üìã</div><div class='kpi-text'><div class='kpi-value'>{total_surfaces/1000:.1f}K</div><div class='kpi-title'>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π</div></div></div>""", unsafe_allow_html=True)
                with kpi_cols[1]: st.markdown(f"""<div class='card kpi-card'><div class='kpi-icon' style='background-color: #50E3C2;'>üìà</div><div class='kpi-text'><div class='kpi-value'>{avg_grp:.3f}</div><div class='kpi-title'>–°—Ä–µ–¥–Ω–∏–π GRP (18+)</div></div></div>""", unsafe_allow_html=True)
                with kpi_cols[2]: st.markdown(f"""<div class='card kpi-card'><div class='kpi-icon' style='background-color: #BD10E0;'>üë•</div><div class='kpi-text'><div class='kpi-value'>{avg_ots_k:.1f}K</div><div class='kpi-title'>–°—Ä–µ–¥–Ω–∏–π OTS (18+)</div></div></div>""", unsafe_allow_html=True)
                st.markdown("<br>", unsafe_allow_html=True)
                
                with st.container():
                    st.markdown("<div class='card'>", unsafe_allow_html=True)
                    st.subheader("–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ —Ñ–æ—Ä–º–∞—Ç–∞–º")
                    summary_table = df_filtered.groupby(['city', 'seller', 'format']).agg(–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=('surface_id', 'nunique'), –°—Ä–µ–¥–Ω–∏–π_GRP=('grp', 'mean'), –°—Ä–µ–¥–Ω–∏–π_OTS_—Ç—ã—Å=('ots', 'mean')).reset_index().sort_values(by=['city'])
                    excel_data = to_excel(summary_table); export_button_placeholder.download_button("–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", data=excel_data, file_name="ooh_analytics_report.xlsx", mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet")
                    st.dataframe(summary_table, use_container_width=True)
                    
                    # –ò–ó–ú–ï–ù–ï–ù–û: –í–û–ó–í–†–ê–©–ï–ù–ê –°–¢–ê–ù–î–ê–†–¢–ù–ê–Ø –ö–ê–†–¢–ê ST.MAP
                    st.subheader("–ö–∞—Ä—Ç–∞ –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–µ–π")
                    df_map = df_filtered[['lon', 'lat']].copy()
                    df_map.dropna(inplace=True)

                    if not df_map.empty:
                        st.map(df_map) # –ü—Ä–æ—Å—Ç–æ, –±–µ—Å–ø–ª–∞—Ç–Ω–æ, –±–µ–∑ –∫–ª—é—á–µ–π, –Ω–æ —Å –±–æ–ª—å—à–∏–º–∏ —Ç–æ—á–∫–∞–º–∏
                    else:
                        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö —Å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ –∫–∞—Ä—Ç–µ.")
                        
                    st.markdown("</div>", unsafe_allow_html=True)